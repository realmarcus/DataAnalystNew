# Some gradient descent settings
iterations = 1500
alpha = 0.01
J = 0
for (i in 1:m) {
Hi = theta %*% X[i,]
Temp =( Hi-y[i])^2;
J = J+ Temp;
}
J = J/(2*m)
J
Hi
Temp
i
[0,0]
[0;0]
# SETUP
Sys.setlocale("LC_ALL", "C")
# Part 1: Basic Function
print ("Running warmUpExercise")
# 5x5 Identity Matrix
A = diag(3)
print(A)
# Part 2: Plotting
print("Plotting Data ...\n")
# SET FOLDER
setwd("C:\Users\Diallo\Documents\MachineLearningStanford\R")
# READ INPUT FILE
df = read.csv("MachineLearningStanford/R/ex1data1.csv")
# rename col names
colnames(df)<- c("X","y")
x = df$X
y = df$y
#number of training examples
m = length(y)
# plot data
plot(x,y)
# Part 3: Gradient descent
# X = [ones(m, 1), data(:,1)]; % Add a column of ones to x
X = cbind(1,x)
# initialize fitting parameters
theta = rep(0,2)
# Some gradient descent settings
iterations = 1500
alpha = 0.01
J = 0
for (i in 1:m) {
Hi = theta %*% X[i,]
Temp =( Hi-y[i])^2;
J = J+ Temp;
}
J = J/(2*m)
J_history = rep(0,iterations)
for (iter in 1:iterations) {
Temp = rep(0,2);
for (i in 1:m) {
for (j in 1:2) {
Hix = theta %*% X[i,]
Temp[j] = Temp[j]+(Hix - y[i])*X[i,j]
}
}
}
theta = theta-alpha %*% Temp/m
theta
Temp
X
J_history
# SETUP
Sys.setlocale("LC_ALL", "C")
# Part 1: Basic Function
print ("Running warmUpExercise")
# 5x5 Identity Matrix
A = diag(3)
print(A)
# Part 2: Plotting
print("Plotting Data ...\n")
# SET FOLDER
setwd("C:\Users\Diallo\Documents\MachineLearningStanford\R")
# READ INPUT FILE
df = read.csv("MachineLearningStanford/R/ex1data1.csv")
# rename col names
colnames(df)<- c("X","y")
x = df$X
y = df$y
#number of training examples
m = length(y)
# plot data
plot(x,y)
# Part 3: Gradient descent
# X = [ones(m, 1), data(:,1)]; % Add a column of ones to x
X = cbind(1,x)
# initialize fitting parameters
theta = rep(0,2)
# Some gradient descent settings
iterations = 1500
alpha = 0.01
J = 0
for (i in 1:m) {
Hi = theta %*% X[i,]
Temp =( Hi-y[i])^2;
J = J+ Temp;
}
J = J/(2*m)
J_history = rep(0,iterations)
for (iter in 1:iterations) {
Temp = rep(0,2);
for (i in 1:m) {
for (j in 1:2) {
Hix = theta %*% X[i,]
Temp[j] = Temp[j]+(Hix - y[i])*X[i,j]
}
}
theta = theta-alpha %*% Temp/m
J_history(iter) = computeCost(X, y, theta);
}
# SETUP
Sys.setlocale("LC_ALL", "C")
# Part 1: Basic Function
print ("Running warmUpExercise")
# 5x5 Identity Matrix
A = diag(3)
print(A)
# Part 2: Plotting
print("Plotting Data ...\n")
# SET FOLDER
setwd("C:\Users\Diallo\Documents\MachineLearningStanford\R")
# READ INPUT FILE
df = read.csv("MachineLearningStanford/R/ex1data1.csv")
# rename col names
colnames(df)<- c("X","y")
x = df$X
y = df$y
#number of training examples
m = length(y)
# plot data
plot(x,y)
# Part 3: Gradient descent
# X = [ones(m, 1), data(:,1)]; % Add a column of ones to x
X = cbind(1,x)
# initialize fitting parameters
theta = rep(0,2)
# Some gradient descent settings
iterations = 1500
alpha = 0.01
J = 0
for (i in 1:m) {
Hi = theta %*% X[i,]
Temp =( Hi-y[i])^2;
J = J+ Temp;
}
J = J/(2*m)
J_history = rep(0,iterations)
for (iter in 1:iterations) {
Temp = rep(0,2);
for (i in 1:m) {
for (j in 1:2) {
Hix = theta %*% X[i,]
Temp[j] = Temp[j]+(Hix - y[i])*X[i,j]
}
}
theta = theta-alpha %*% Temp/m
for (k in 1:m) {
Hi = theta %*% X[k,]
Temp =( Hi-y[k])^2;
J = J+ Temp;
}
J = J/(2*m)
J_history(iter) = J;
}
# SETUP
Sys.setlocale("LC_ALL", "C")
# Part 1: Basic Function
print ("Running warmUpExercise")
# 5x5 Identity Matrix
A = diag(3)
print(A)
# Part 2: Plotting
print("Plotting Data ...\n")
# SET FOLDER
setwd("C:\Users\Diallo\Documents\MachineLearningStanford\R")
# READ INPUT FILE
df = read.csv("MachineLearningStanford/R/ex1data1.csv")
# rename col names
colnames(df)<- c("X","y")
x = df$X
y = df$y
#number of training examples
m = length(y)
# plot data
plot(x,y)
# Part 3: Gradient descent
# X = [ones(m, 1), data(:,1)]; % Add a column of ones to x
X = cbind(1,x)
# initialize fitting parameters
theta = rep(0,2)
# Some gradient descent settings
iterations = 1500
alpha = 0.01
J = 0
for (i in 1:m) {
Hi = theta %*% X[i,]
Temp =( Hi-y[i])^2;
J = J+ Temp;
}
J = J/(2*m)
J_history = rep(0,iterations)
for (iter in 1:iterations) {
Temp = rep(0,2);
for (i in 1:m) {
for (j in 1:2) {
Hix = theta %*% X[i,]
Temp[j] = Temp[j]+(Hix - y[i])*X[i,j]
}
}
theta = theta-alpha %*% Temp/m
for (k in 1:m) {
Hi = theta %*% X[k,]
Temp =( Hi-y[k])^2;
J = J+ Temp;
}
J = J/(2*m)
J_history[iter] = J;
}
theta
J_history
plot(J_history)
# SETUP
Sys.setlocale("LC_ALL", "C")
# Part 1: Basic Function
print ("Running warmUpExercise")
# 5x5 Identity Matrix
A = diag(3)
print(A)
# Part 2: Plotting
print("Plotting Data ...\n")
# SET FOLDER
setwd("C:\Users\Diallo\Documents\MachineLearningStanford\R")
# READ INPUT FILE
df = read.csv("MachineLearningStanford/R/ex1data1.csv")
# rename col names
colnames(df)<- c("X","y")
x = df$X
y = df$y
#number of training examples
m = length(y)
# plot data
plot(x,y)
# Part 3: Gradient descent
# X = [ones(m, 1), data(:,1)]; % Add a column of ones to x
X = cbind(1,x)
# initialize fitting parameters
theta = rep(0,2)
# Some gradient descent settings
iterations = 1500
alpha = 0.01
J = 0
for (i in 1:m) {
Hi = theta %*% X[i,]
Temp =( Hi-y[i])^2;
J = J+ Temp;
}
J = J/(2*m)
J_history = rep(0,iterations)
for (iter in 1:iterations) {
Temp = rep(0,2);
for (i in 1:m) {
for (j in 1:2) {
Hix = theta %*% X[i,]
Temp[j] = Temp[j]+(Hix - y[i])*X[i,j]
}
}
theta = theta-alpha %*% Temp/m
for (k in 1:m) {
Hi = theta %*% X[k,]
Temp =( Hi-y[k])^2;
J = J+ Temp;
}
J = J/(2*m)
J_history[iter] = J;
}
plot(X[,2], X %*% theta)
pwd
pwd()
getwd()
# SETUP
Sys.setlocale("LC_ALL", "C")
# Part 1: Basic Function
print ("Running warmUpExercise")
# 5x5 Identity Matrix
A = diag(3)
print(A)
# Part 2: Plotting
print("Plotting Data ...\n")
# SET FOLDER
setwd("C:\Users\Diallo\Documents\MachineLearningStanford\R")
# READ INPUT FILE
df = read.csv("MachineLearningStanford/R/ex1data1.csv")
# rename col names
colnames(df)<- c("X","y")
x = df$X
y = df$y
#number of training examples
m = length(y)
# plot data
plot(x,y)
# Part 3: Gradient descent
# X = [ones(m, 1), data(:,1)]; % Add a column of ones to x
X = cbind(1,x)
# initialize fitting parameters
theta = rep(0,2)
# Some gradient descent settings
iterations = 1500
alpha = 0.01
J = 0
for (i in 1:m) {
Hi = theta %*% X[i,]
Temp =( Hi-y[i])^2;
J = J+ Temp;
}
J = J/(2*m)
J_history = rep(0,iterations)
for (iter in 1:iterations) {
Temp = rep(0,2);
for (i in 1:m) {
for (j in 1:2) {
Hix = theta %*% X[i,]
Temp[j] = Temp[j]+(Hix - y[i])*X[i,j]
}
}
theta = theta-alpha %*% Temp/m
for (k in 1:m) {
Hi = theta %*% X[k,]
Temp =( Hi-y[k])^2;
J = J+ Temp;
}
J = J/(2*m)
J_history[iter] = J;
}
plot(X[,2], X %*% theta)
getwd()
setwd("./DataAnalyst/")
#libraries
library("dplyr")
# import data
data <- read.csv("data-15aa4675580.csv")
# create data frame
df <- tbl_df(data)
# Analyze data
summary(df)
str(df)
# convert factors as characters
df %>% mutate_if(is.factor, as.character) -> df
# to lower case
df <- mutate(df,Colour = tolower(Colour))
# set pass to true when it belongs to [13,14]
df %>% mutate(pass = (Vals<=14)&(Vals>=13)) -> df
# Analyze data
# count Colours
table(df$Colour)
#arrange by colour and pass
df %>% arrange(Colour,pass) -> df
# solve typo "purpal"
df %>%
mutate(Colour=replace(Colour, Colour=="purpal", "purple")) -> df
# capitalize first letter of colour names
df %>%
mutate(Colour=replace(Colour, Colour=="purple", "Purple")) %>%
mutate(Colour=replace(Colour, Colour=="red", "Red")) %>%
mutate(Colour=replace(Colour, Colour=="blue", "Blue")) %>%
mutate(Colour=replace(Colour, Colour=="green", "Green")) -> df
# Count nb part per Colours
table(df$Colour)
# store nb of rows in Variable
N = nrow(df)
# group by colour
by_colour <- group_by(df,Colour)
by_colour %>%  summarise(Number_of_Parts = n()) %>% select(Colour,Number_of_Parts) -> df_nb_part
# store results for nb parts
df_result <- df_nb_part
# group by colour and by pass
by_colour_pass <- group_by(df,Colour,pass)
# compute percent pass (when pass is TRUE)
by_colour_pass %>% filter(pass==TRUE) %>% summarise(Percent_Pass = 100*n()/N) %>% select(Colour,Percent_Pass)-> df_percent_pass
# store results
df_result$Percent_Pass = df_percent_pass$Percent_Pass
# compute mean length and variance of length
by_colour %>% summarise(Mean_length = mean(Vals),Variance_of_length = var(Vals)) -> df_mean_var
# store results for mean and variance
df_result$Mean_length = df_mean_var$Mean_length
df_result$Variance_of_length = df_mean_var$Variance_of_length
# save in csv file
write.csv(df_result, file = "result.csv")
#libraries
library("dplyr")
library("ggplot2")
# import data
data <- read.csv("data-15aa4675580.csv")
# create data frame
df <- tbl_df(data)
# Analyze data
summary(df)
str(df)
# convert factors as characters
df %>% mutate_if(is.factor, as.character) -> df
# to lower case
df <- mutate(df,Colour = tolower(Colour))
# set pass to true when it belongs to [13,14]
df %>% mutate(pass = (Vals<=14)&(Vals>=13)) -> df
# Analyze data
# count Colours
table(df$Colour)
#arrange by colour and pass
df %>% arrange(Colour,pass) -> df
# solve typo "purpal"
df %>%
mutate(Colour=replace(Colour, Colour=="purpal", "purple")) -> df
# capitalize first letter of colour names
df %>%
mutate(Colour=replace(Colour, Colour=="purple", "Purple")) %>%
mutate(Colour=replace(Colour, Colour=="red", "Red")) %>%
mutate(Colour=replace(Colour, Colour=="blue", "Blue")) %>%
mutate(Colour=replace(Colour, Colour=="green", "Green")) -> df
# Count nb part per Colours
table(df$Colour)
# store nb of rows in Variable
N = nrow(df)
# group by colour
by_colour <- group_by(df,Colour)
by_colour %>%  summarise(Number_of_Parts = n()) %>% select(Colour,Number_of_Parts) -> df_nb_part
# store results for nb parts
df_result <- df_nb_part
# group by colour and by pass
by_colour_pass <- group_by(df,Colour,pass)
# compute percent pass (when pass is TRUE)
by_colour_pass %>% filter(pass==TRUE) %>% summarise(Percent_Pass = 100*n()/N) %>% select(Colour,Percent_Pass)-> df_percent_pass
# store results
df_result$Percent_Pass = df_percent_pass$Percent_Pass
# compute mean length and variance of length
by_colour %>% summarise(Mean_length = mean(Vals),Variance_of_length = var(Vals)) -> df_mean_var
# store results for mean and variance
df_result$Mean_length = df_mean_var$Mean_length
df_result$Variance_of_length = df_mean_var$Variance_of_length
# save in csv file
write.csv(df_result, file = "result.csv")
#plotting
#ggplot(df_result,aes(x = ))
df_result
ggplot(df_result,aes(x = Colour,y = Number_of_Parts))+geom_bar()
ggplot(df,aes(x = Colour,y = Number_of_Parts))+geom_bar()
ggplot(df,aes(x = factor(Colour)))+geom_bar()
df
tail(df)
str(df)
summary(df)
#libraries
library("dplyr")
library("ggplot2")
# import data
data <- read.csv("data-15aa4675580.csv")
# create data frame
df <- tbl_df(data)
# Analyze data
summary(df)
str(df)
ggplot(df,aes(x = factor(Colour)))+geom_bar()
df %>% mutate_if(is.factor, as.character) -> df
# to lower case
df <- mutate(df,Colour = tolower(Colour))
ggplot(df,aes(x = factor(Colour)))+geom_bar()
df %>% mutate(pass = (Vals<=14)&(Vals>=13)) -> df
df %>% arrange(Colour,pass) -> df
ggplot(df,aes(x = factor(Colour)))+geom_bar()
df %>%
mutate(Colour=replace(Colour, Colour=="purpal", "purple")) -> df
ggplot(df,aes(x = factor(Colour)))+geom_bar()
df %>%
mutate(Colour=replace(Colour, Colour=="purple", "Purple")) %>%
mutate(Colour=replace(Colour, Colour=="red", "Red")) %>%
mutate(Colour=replace(Colour, Colour=="blue", "Blue")) %>%
mutate(Colour=replace(Colour, Colour=="green", "Green")) -> df
ggplot(df,aes(x = factor(Colour)))+geom_bar()
table(df$Colour)
N = nrow(df)
by_colour <- group_by(df,Colour)
by_colour %>%  summarise(Number_of_Parts = n()) %>% select(Colour,Number_of_Parts) -> df_nb_part
df_result <- df_nb_part
# group by colour and by pass
by_colour_pass <- group_by(df,Colour,pass)
# compute percent pass (when pass is TRUE)
by_colour_pass %>% filter(pass==TRUE) %>% summarise(Percent_Pass = 100*n()/N) %>% select(Colour,Percent_Pass)-> df_percent_pass
# store results
df_result$Percent_Pass = df_percent_pass$Percent_Pass
df_result
df_result
by_colour_pass
ggplot(by_colour_pass,aes(x = Colour))+geom_boxplot()
ggplot(by_colour_pass,aes(x = Colour,y = Vals))+geom_boxplot()
ggplot(by_colour_pass,aes(x = Colour,y = Vals))+geom_boxplot()
ggplot(by_colour_pass,aes(x = interaction(Colour,pass),y = Vals))+geom_boxplot()
ggplot(by_colour_pass,aes(x = factor(Colour),y = Vals))+geom_boxplot()
ggplot(by_colour_pass,aes(x = factor(Interaction(Colour,pass)),y = Vals))+geom_boxplot()
interaction(Colour,pass)
ggplot(by_colour_pass,aes(x = Colour,y = Vals))+geom_boxplot()
df_result
df
ggplot(df,aes(x = Colour,y = Vals,fill=pass))+geom_bar()
ggplot(df,aes(x = factor(Colour),y = Vals,fill=pass))+geom_bar()
df
ggplot(df,aes(x = factor(Colour),y = Vals,fill=pass))+geom_bar(stat="identity")
ggplot(df,aes(x = factor(Colour)))+geom_bar()
df
df_percent_pass
